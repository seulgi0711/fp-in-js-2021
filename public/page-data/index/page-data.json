{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"4479b0dc-44d5-5392-b515-da1182ae22fa","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Hello FP in JS \\uD83D\\uDC4B\"), mdx(\"div\", null, \"\\uBE44\\uC988\\uC6F9\\uAC1C\\uBC1C\\uC140\"), mdx(\"div\", null, \"theo.gt\"), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uC0B4\\uD3B4\\uBCFC \\uB0B4\\uC6A9\"), mdx(\"ul\", null, mdx(\"li\", null, \"Code Style\"), mdx(\"li\", null, \"Function Composition\"), mdx(\"li\", null, \"Pointfree Style & Currying\"), mdx(\"li\", null, \"Functional Programming Styles\"), mdx(\"li\", null, \"Functor & Error Handling\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Code Style\"), mdx(\"p\", null, \"\\uCF54\\uB4DC \\uC2A4\\uD0C0\\uC77C\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-01.json title=\\\"Code Style\\\" subtitle=\\\"FP 스터디 신청자 이름 목록\\\"\",\n    \"file\": \"./src/CodeStyle/name-01.json\",\n    \"title\": \"\\\"Code\",\n    \"Style\\\"\": true,\n    \"subtitle\": \"\\\"FP\",\n    \"스터디\": true,\n    \"신청자\": true,\n    \"이름\": true,\n    \"목록\\\"\": true\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian_Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim-Mackenzie\\\",\\n  \\\"dan_Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank_chapman\\\",\\n  \\\"Dorothy-Sanderson\\\",\\n  \\\"Fiona_Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, imperativeTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\",\n    \"metastring\": \"title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\n2. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791\\n3. \\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-01.json title=\\\"변경 전\\\"\",\n    \"file\": \"./src/CodeStyle/name-01.json\",\n    \"title\": \"\\\"변경\",\n    \"전\\\"\": true\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian_Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim-Mackenzie\\\",\\n  \\\"dan_Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank_chapman\\\",\\n  \\\"Dorothy-Sanderson\\\",\\n  \\\"Fiona_Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1 title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\n2. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791\\n3. \\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json title=\\\"변경 후\\\"\",\n    \"file\": \"./src/CodeStyle/name-02.json\",\n    \"title\": \"\\\"변경\",\n    \"후\\\"\": true\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2 title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\n2. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791\\n3. \\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-03.json title=\\\"변경 후\\\"\",\n    \"file\": \"./src/CodeStyle/name-03.json\",\n    \"title\": \"\\\"변경\",\n    \"후\\\"\": true\n  }, \"[\\n  \\\"Leah Kelly\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Alexander James\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"3 title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84\\n2. \\uC131\\uACFC \\uC774\\uB984\\uC740 \\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791\\n3. \\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"2:11 file=./src/CodeStyle/name-com.json title=\\\"변경 후\\\"\",\n    \"2:11\": true,\n    \"file\": \"./src/CodeStyle/name-com.json\",\n    \"title\": \"\\\"변경\",\n    \"후\\\"\": true\n  }, \"[\\n  \\\"Alexander James\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Leah Kelly\\\",\\n  \\\"Robert Edmunds\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Tim Mackenzie\\\"\\n]\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    themes: [imperativeTheme, imperativeTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Imperative: \\uC774\\uB984 \\uBAA9\\uB85D \\uC21C\\uD68C\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-01.json\",\n    \"file\": \"./src/CodeStyle/name-01.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian_Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim-Mackenzie\\\",\\n  \\\"dan_Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank_chapman\\\",\\n  \\\"Dorothy-Sanderson\\\",\\n  \\\"Fiona_Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-01.js\",\n    \"file\": \"./src/CodeStyle/imper-01.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n}\\n\"))), mdx(Step, {\n    subtitle: \"\\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84: \\uC5B8\\uB354\\uBC14(_), \\uB300\\uC2DC(-) \\uBB38\\uC790\\uB97C \\uBE48 \\uBB38\\uC790\\uC5F4\\uB85C \\uB300\\uCCB4\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-02.js\",\n    \"file\": \"./src/CodeStyle/imper-02.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n\\n  names[i] = spaceName;\\n}\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: \\uACF5\\uBC31\\uC744 \\uAE30\\uC900\\uC73C\\uB85C \\uC774\\uB984\\uC744 \\uCABC\\uAC1C\\uC900\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-03.js\",\n    \"file\": \"./src/CodeStyle/imper-03.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  names[i] = spaceName;\\n}\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: \\uCABC\\uAC1C\\uC900 \\uC774\\uB984\\uC758 \\uCCAB \\uAE00\\uC790\\uB97C \\uB300\\uBB38\\uC790\\uB85C \\uBC14\\uAFD4\\uC900\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-04.js\",\n    \"file\": \"./src/CodeStyle/imper-04.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = spaceName;\\n}\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: splitName\\uC744 \\uACF5\\uBC31\\uC744 \\uB123\\uC5B4\\uC11C join \\uD55C\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-03.json\",\n    \"file\": \"./src/CodeStyle/name-03.json\"\n  }, \"[\\n  \\\"Leah Kelly\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Alexander James\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-05.js\",\n    \"file\": \"./src/CodeStyle/imper-05.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\"))), mdx(Step, {\n    subtitle: \"\\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C: sort \\uBA54\\uC18C\\uB4DC \\uC774\\uC6A9\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-com.json\",\n    \"file\": \"./src/CodeStyle/name-com.json\"\n  }, \"[\\n  \\\"Alexander James\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Leah Kelly\\\",\\n  \\\"Robert Edmunds\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Tim Mackenzie\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-com.js\",\n    \"file\": \"./src/CodeStyle/imper-com.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"1:21 file=./src/CodeStyle/name-com.json\",\n    \"1:21\": true,\n    \"file\": \"./src/CodeStyle/name-com.json\"\n  }, \"[\\n  \\\"Alexander James\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Leah Kelly\\\",\\n  \\\"Robert Edmunds\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Tim Mackenzie\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:23 file=./src/CodeStyle/imper-com.js\",\n    \"5:23\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    themes: [fpTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Functional: map \\uBA54\\uC18C\\uB4DC\\uB97C \\uC774\\uC6A9\\uD558\\uBA74 \\uC21C\\uD68C\\uD558\\uBA70 \\uBCC0\\uACBD \\uAC00\\uB2A5\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-01.json\",\n    \"file\": \"./src/CodeStyle/name-01.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian_Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim-Mackenzie\\\",\\n  \\\"dan_Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank_chapman\\\",\\n  \\\"Dorothy-Sanderson\\\",\\n  \\\"Fiona_Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-01.js\",\n    \"file\": \"./src/CodeStyle/fp-01.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nnames\\n  .map(...)\\n\"))), mdx(Step, {\n    subtitle: \"\\uACF5\\uBC31\\uC73C\\uB85C \\uAD6C\\uBD84: replaceSpace\\uB77C\\uB294 \\uD568\\uC218\\uB97C \\uC815\\uC758\\uD574\\uC11C map \\uD568\\uC218\\uB85C \\uB118\\uACA8\\uC900\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-02.js\",\n    \"file\": \"./src/CodeStyle/fp-02.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: \\uC6B0\\uC120 string\\uC758 \\uCCAB \\uAE00\\uC790\\uB97C \\uB300\\uBB38\\uC790\\uB85C \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218 \\uC815\\uC758\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-03.1.js\",\n    \"file\": \"./src/CodeStyle/fp-03.1.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: \\uC774\\uB984\\uC744 \\uBC1B\\uC544\\uC11C \\uACF5\\uBC31 \\uAE30\\uC900\\uC73C\\uB85C \\uCCAB \\uAE00\\uC790\\uB9CC \\uB300\\uBB38\\uC790\\uB85C \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\uB97C \\uC815\\uC758\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-02.json\",\n    \"file\": \"./src/CodeStyle/name-02.json\"\n  }, \"[\\n  \\\"leah kelly\\\",\\n  \\\"christian Nolan\\\",\\n  \\\"Alexander james\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-03.2.js\",\n    \"file\": \"./src/CodeStyle/fp-03.2.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ') // ['leah', 'kelly']\\n    .map(startCase) // ['Leah', 'Kelly']\\n    .join(' ') // 'Leah Kelly'\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n\"))), mdx(Step, {\n    subtitle: \"\\uB300\\uBB38\\uC790\\uB85C \\uC2DC\\uC791: map + changePartStartCase\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-03.json\",\n    \"file\": \"./src/CodeStyle/name-03.json\"\n  }, \"[\\n  \\\"Leah Kelly\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Alexander James\\\",\\n  \\\"Tim Mackenzie\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Robert Edmunds\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-03.3.js\",\n    \"file\": \"./src/CodeStyle/fp-03.3.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ') // ['leah', 'kelly']\\n    .map(startCase) // ['Leah', 'Kelly']\\n    .join(' ') // 'Leah Kelly'\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n\"))), mdx(Step, {\n    subtitle: \"\\uC624\\uB984\\uCC28\\uC21C \\uC815\\uB82C\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-com.json\",\n    \"file\": \"./src/CodeStyle/name-com.json\"\n  }, \"[\\n  \\\"Alexander James\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Leah Kelly\\\",\\n  \\\"Robert Edmunds\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Tim Mackenzie\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-com.js\",\n    \"file\": \"./src/CodeStyle/fp-com.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./src/CodeStyle/name-com.json\",\n    \"file\": \"./src/CodeStyle/name-com.json\"\n  }, \"[\\n  \\\"Alexander James\\\",\\n  \\\"Christian Nolan\\\",\\n  \\\"Dan Hunter\\\",\\n  \\\"Dorothy Sanderson\\\",\\n  \\\"Fiona Glover\\\",\\n  \\\"Frank Chapman\\\",\\n  \\\"Leah Kelly\\\",\\n  \\\"Robert Edmunds\\\",\\n  \\\"Ryan Bower\\\",\\n  \\\"Tim Mackenzie\\\"\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:20 file=./src/CodeStyle/fp-com.js\",\n    \"5:20\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\"\",\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\"\",\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5,6,21 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"for loop로 순회\\\"\",\n    \"5,6,21\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"for\",\n    \"loop로\": true,\n    \"순회\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"18[4:7,36],19[4:7,43] file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"map 메소드로 순회\\\"\",\n    \"18[4:7,36],19[4:7,43]\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"map\",\n    \"메소드로\": true,\n    \"순회\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6,7 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"성과 이름은 공백으로 구분: replace로 변경 후 spaceName에 저장\\\"\",\n    \"6,7\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"성과\",\n    \"이름은\": true,\n    \"공백으로\": true,\n    \"구분:\": true,\n    \"replace로\": true,\n    \"변경\": true,\n    \"후\": true,\n    \"spaceName에\": true,\n    \"저장\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:7,18 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"성과 이름은 공백으로 구분: map + replaceSpace\\\"\",\n    \"5:7,18\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"성과\",\n    \"이름은\": true,\n    \"공백으로\": true,\n    \"구분:\": true,\n    \"map\": true,\n    \"+\": true,\n    \"replaceSpace\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"13:15 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"앞글자만 대문자로 변경 후 재 할당\\\"\",\n    \"13:15\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"앞글자만\",\n    \"대문자로\": true,\n    \"변경\": true,\n    \"후\": true,\n    \"재\": true,\n    \"할당\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"9:11 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"앞글자만 대문자로 변경 후 반환\\\"\",\n    \"9:11\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"앞글자만\",\n    \"대문자로\": true,\n    \"변경\": true,\n    \"후\": true,\n    \"반환\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"9:20 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"이름을 공백으로 쪼개서 for loop를 이용해 앞글자만 대문자로 변경후 재 할당\\\"\",\n    \"9:20\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"이름을\",\n    \"공백으로\": true,\n    \"쪼개서\": true,\n    \"for\": true,\n    \"loop를\": true,\n    \"이용해\": true,\n    \"앞글자만\": true,\n    \"대문자로\": true,\n    \"변경후\": true,\n    \"재\": true,\n    \"할당\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"9[7:15],13:15,19 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"map + changePartStartCase: 앞에 정의한 startCase를 map과 함께 사용해서 반환\\\"\",\n    \"9[7:15],13:15,19\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"map\",\n    \"+\": true,\n    \"changePartStartCase:\": true,\n    \"앞에\": true,\n    \"정의한\": true,\n    \"startCase를\": true,\n    \"map과\": true,\n    \"함께\": true,\n    \"사용해서\": true,\n    \"반환\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"23\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"23 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"오름차순 정렬\\\"\",\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"오름차순\",\n    \"정렬\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"20\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"20 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"오름차순 정렬\\\"\",\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"오름차순\",\n    \"정렬\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    subtitle: \"\\uB450\\uAC00\\uC9C0 \\uC2A4\\uD0C0\\uC77C\\uC758 \\uCF54\\uB4DC\\uC5D0\\uC11C \\uCC28\\uC774\\uAC00 \\uB290\\uAEF4\\uC9C0\\uC2DC\\uB098\\uC694?\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:23 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\"\",\n    \"5:23\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:20 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\"\",\n    \"5:20\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6[9:12],7[9:17],9[9:17],12[9:16],13[5:12],17[5:16],20[3:10] file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"값을 저장할 변수 선언과 재할당\\\"\",\n    \"6[9:12],7[9:17],9[9:17],12[9:16],13[5:12],17[5:16],20[3:10]\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"값을\",\n    \"저장할\": true,\n    \"변수\": true,\n    \"선언과\": true,\n    \"재할당\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"17:20 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"값을 저장하는 변수 사용 안함\\\"\",\n    \"17:20\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"값을\",\n    \"저장하는\": true,\n    \"변수\": true,\n    \"사용\": true,\n    \"안함\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5,7,9,11,14,15,17,20 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"코드 표현: 어떻게(How)\\\"\",\n    \"5,7,9,11,14,15,17,20\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"코드\",\n    \"표현:\": true,\n    \"어떻게(How)\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"17:20 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"코드 표현: 무엇(What)\\\"\",\n    \"17:20\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"코드\",\n    \"표현:\": true,\n    \"무엇(What)\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:23 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\" subtitle=\\\"함수 없음\\\"\",\n    \"5:23\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\",\n    \"subtitle\": \"\\\"함수\",\n    \"없음\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5,9,13 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\" subtitle=\\\"함수 기반\\\"\",\n    \"5,9,13\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\",\n    \"subtitle\": \"\\\"함수\",\n    \"기반\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:23 file=./src/CodeStyle/imper-com.js title=\\\"Imperative\\\"\",\n    \"5:23\": true,\n    \"file\": \"./src/CodeStyle/imper-com.js\",\n    \"title\": \"\\\"Imperative\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nfor (let i = 0; i < names.length; i += 1) {\\n  const name = names[i];\\n  const spaceName = name.replace(/(_|-)/, \\\" \\\");\\n  // ['leah', 'kelly']\\n  const splitName = spaceName.split(\\\" \\\");\\n\\n  for (let j = 0; j < splitName.length; j += 1) {\\n    let partName = splitName[j];\\n    partName = \\n      partName.charAt(0).toUpperCase() + \\n      partName.slice(1);\\n    // ['Leah', 'Kelly']\\n    splitName[j] = partName;\\n  }\\n\\n  names[i] = splitName.join(' ');\\n}\\n\\nnames.sort();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:22 file=./src/CodeStyle/fp-com.js title=\\\"Functional\\\"\",\n    \"5:22\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"Functional\\\"\"\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uD568\\uC218\\uD615 \\uD504\\uB85C\\uADF8\\uB798\\uBC0D\\uC758 \\uD2B9\\uC9D5\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"First Class Function\\\" subtitle=\\\"함수 선언\\\"\",\n    \"title\": \"\\\"First\",\n    \"Class\": true,\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"함수\",\n    \"선언\\\"\": true\n  }, \"function startCase(str) {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nstartCase('hello'); // Hello\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"First Class Function\\\" subtitle=\\\"함수를 변수에 할당하는 형태로 선언할 수 있다.\\\"\",\n    \"title\": \"\\\"First\",\n    \"Class\": true,\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"함수를\",\n    \"변수에\": true,\n    \"할당하는\": true,\n    \"형태로\": true,\n    \"선언할\": true,\n    \"수\": true,\n    \"있다.\\\"\": true\n  }, \"const startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst startCase = function(str) {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nstartCase('hello'); // Hello\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1[64:90],2,3[1] title=\\\"First Class Function\\\" subtitle=\\\"함수를 파라미터로 전달\\\"\",\n    \"1[64:90],2,3[1]\": true,\n    \"title\": \"\\\"First\",\n    \"Class\": true,\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"함수를\",\n    \"파라미터로\": true,\n    \"전달\\\"\": true\n  }, \"document.querySelector('.my-button').addEventListener('click', (event) => {\\n  console.log('\\uBC84\\uD2BC \\uD074\\uB9AD!');\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"2:4 title=\\\"First Class Function\\\" subtitle=\\\"함수를 리턴하는 함수\\\"\",\n    \"2:4\": true,\n    \"title\": \"\\\"First\",\n    \"Class\": true,\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"함수를\",\n    \"리턴하는\": true,\n    \"함수\\\"\": true\n  }, \"const returnFunction = () => {\\n  return () => {\\n    // ...\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"파라미터에만 의존하는 순수 함수\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"파라미터에만\",\n    \"의존하는\": true,\n    \"순수\": true,\n    \"함수\\\"\": true\n  }, \"const negate = (num) => {\\n  return num * -1;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"외부 변수에 의존하는 불순 함수\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"외부\",\n    \"변수에\": true,\n    \"의존하는\": true,\n    \"불순\": true,\n    \"함수\\\"\": true\n  }, \"let num = 10;\\n\\nconst negate = () => {\\n  return num * -1;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"maxNum이 다른곳에서 바뀐다면?\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"maxNum이\",\n    \"다른곳에서\": true,\n    \"바뀐다면?\\\"\": true\n  }, \"let maxNum = 5;\\n\\nconst isGraterThanFive = (num) => {\\n  return num > maxNum;\\n}\\n\\nisGraterThanFive(10);\\n// true\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"결과 값이 달라진다.\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"결과\",\n    \"값이\": true,\n    \"달라진다.\\\"\": true\n  }, \"const isGraterThanFive = (num) => {\\n  return num > maxNum;\\n}\\n\\nmaxNum = 20;\\n\\nisGraterThanFive(10);\\n// flase\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"Immutable\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"Immutable\\\"\"\n  }, \"const replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Pure Function\\\" subtitle=\\\"기존 값을 변경하지 않고, 새로운 값을 반환. 즉, 사이드 이펙트 없음.\\\"\",\n    \"title\": \"\\\"Pure\",\n    \"Function\\\"\": true,\n    \"subtitle\": \"\\\"기존\",\n    \"값을\": true,\n    \"변경하지\": true,\n    \"않고,\": true,\n    \"새로운\": true,\n    \"반환.\": true,\n    \"즉,\": true,\n    \"사이드\": true,\n    \"이펙트\": true,\n    \"없음.\\\"\": true\n  }, \"const replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nconst name = 'leah kelly';\\nconst startCaseName = changePartStartCase(str);\\n\\nconsole.log(name); // 'leah kelly'\\nconsole.log(startCaseName); // 'Leah Kelly'\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Function Composition\"), mdx(\"p\", null, \"\\uD568\\uC218 \\uD569\\uC131\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-1.js subtitle=\\\"아무 생각없이 만든 함수\\\"\",\n    \"file\": \"./src/FunctionComposition/1-1.js\",\n    \"subtitle\": \"\\\"아무\",\n    \"생각없이\": true,\n    \"만든\": true,\n    \"함수\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-2.js subtitle=\\\"2의 네 제곱\\\"\",\n    \"file\": \"./src/FunctionComposition/1-2.js\",\n    \"subtitle\": \"\\\"2의\",\n    \"네\": true,\n    \"제곱\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst powered = pow(2, 4); // 16\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-3.js subtitle=\\\"음수 변환\\\"\",\n    \"file\": \"./src/FunctionComposition/1-3.js\",\n    \"subtitle\": \"\\\"음수\",\n    \"변환\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst powered = pow(2, 4); // 16\\nconst neagted = negate(powered); // -16\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-4.js subtitle=\\\"더하기 1\\\"\",\n    \"file\": \"./src/FunctionComposition/1-4.js\",\n    \"subtitle\": \"\\\"더하기\",\n    \"1\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst powered = pow(2, 4); // 16\\nconst neagted = negate(powered); // -16\\nconst result = inc(negated); // -15\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"16[7:13],17[7:13],18[7:13] file=./src/FunctionComposition/1-4.js subtitle=\\\"변수를 한번 사용하기 때문에 크게 의미가 없다.\\\"\",\n    \"16[7:13],17[7:13],18[7:13]\": true,\n    \"file\": \"./src/FunctionComposition/1-4.js\",\n    \"subtitle\": \"\\\"변수를\",\n    \"한번\": true,\n    \"사용하기\": true,\n    \"때문에\": true,\n    \"크게\": true,\n    \"의미가\": true,\n    \"없다.\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst powered = pow(2, 4); // 16\\nconst neagted = negate(powered); // -16\\nconst result = inc(negated); // -15\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-5.js subtitle=\\\"불필요 변수 제거\\\"\",\n    \"file\": \"./src/FunctionComposition/1-5.js\",\n    \"subtitle\": \"\\\"불필요\",\n    \"변수\": true,\n    \"제거\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\ninc(negate(pow(2, 4))); // -15\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-com.js subtitle=\\\"읽기 힘들다...\\\"\",\n    \"file\": \"./src/FunctionComposition/1-com.js\",\n    \"subtitle\": \"\\\"읽기\",\n    \"힘들다...\\\"\": true\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\ninc(negate(inc(negate(inc(negate(pow(2, 3))))))); // ???\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"\\uD568\\uC218 \\uD569\\uC131\\uC758 \\uC218\\uD559\\uC801 \\uD45C\\uD604\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"(h \\u30FB g \\u30FB f)(x) = h( g( f( x ) ) )\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"inc(negate(pow(2, 4)));\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"\\uC218\\uD559\\uC801 \\uD45C\\uD604\\uC744 \\uC77D\\uAE30 \\uD3B8\\uD558\\uAC8C \\uBC14\\uAFD4\\uC904 compose \\uD568\\uC218\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/compose.js\",\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/1-5.js\",\n    \"file\": \"./src/FunctionComposition/1-5.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\ninc(negate(pow(2, 4))); // -15\\n\"))), mdx(Step, {\n    subtitle: \"fns: \\uC2E4\\uD589\\uD560 \\uD568\\uC218 \\uBAA9\\uB85D\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1[18:23] file=./src/FunctionComposition/compose.js\",\n    \"1[18:23]\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"17:19 file=./src/FunctionComposition/compose-1.js\",\n    \"17:19\": true,\n    \"file\": \"./src/FunctionComposition/compose-1.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\ncompose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n);\\n\"))), mdx(Step, {\n    subtitle: \"\\uD568\\uC218 \\uBAA9\\uB85D\\uC744 \\uB118\\uACA8\\uC8FC\\uBA74 \\uD568\\uC218\\uB97C \\uC870\\uD569\\uD55C \\uC0C8\\uB85C\\uC6B4 \\uD568\\uC218\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"2:7 file=./src/FunctionComposition/compose.js\",\n    \"2:7\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/compose-2.js\",\n    \"file\": \"./src/FunctionComposition/compose-2.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst myComposedFunc = compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n);\\n\"))), mdx(Step, {\n    subtitle: \"\\uBC18\\uD658\\uD55C \\uD568\\uC218\\uB294 \\uD568\\uC218 \\uC870\\uD569\\uC758 \\uD30C\\uB77C\\uBBF8\\uD130\\uB85C \\uB118\\uACA8\\uC904 \\uAC12\\uC744 \\uC778\\uC790\\uB85C \\uBC1B\\uB294\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"2[11:17] file=./src/FunctionComposition/compose.js\",\n    \"2[11:17]\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"22[16:19] file=./src/FunctionComposition/compose-3.js\",\n    \"22[16:19]\": true,\n    \"file\": \"./src/FunctionComposition/compose-3.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst myComposedFunc = compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\\nmyComposedFunc(2, 4);\\n\"))), mdx(Step, {\n    subtitle: \"compose\\uC5D0 \\uB118\\uACA8\\uC92C\\uB358 \\uD568\\uC218 \\uBAA9\\uB85D\\uC744 reduceRight\\uB85C \\uC624\\uB978\\uCABD \\uD568\\uC218\\uBD80\\uD130 \\uC2E4\\uD589\\uD55C \\uACB0\\uACFC\\uB97C \\uB2E4\\uC74C \\uD568\\uC218\\uB85C \\uB118\\uACA8\\uC11C \\uC2E4\\uD589\\uD55C\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"3:6 file=./src/FunctionComposition/compose.js\",\n    \"3:6\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/compose-4.js\",\n    \"file\": \"./src/FunctionComposition/compose-4.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst myComposedFunc = compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1 /* 2 */, num2 /* 4 */) => pow(num1, num2) // 16\\n)\\n\\nmyComposedFunc(2, 4);\\n\"))), mdx(Step, {\n    subtitle: \"\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"3:6 file=./src/FunctionComposition/compose.js\",\n    \"3:6\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/compose-5.js\",\n    \"file\": \"./src/FunctionComposition/compose-5.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst myComposedFunc = compose(\\n  (num) => inc(num),\\n  (num /* 16 */) => negate(num), // -16\\n  (num1 /* 2 */, num2 /* 4 */) => pow(num1, num2) // 16\\n)\\n\\nmyComposedFunc(2, 4);\\n\"))), mdx(Step, {\n    subtitle: \"\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"3:6 file=./src/FunctionComposition/compose.js\",\n    \"3:6\": true,\n    \"file\": \"./src/FunctionComposition/compose.js\"\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/compose-6.js\",\n    \"file\": \"./src/FunctionComposition/compose-6.js\"\n  }, \"// \\uC81C\\uACF1 \\uACC4\\uC0B0\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst pow = (num1, num2) => {\\n  return Math.pow(num1, num2);\\n}\\n\\n// \\uC22B\\uC790\\uB97C \\uC74C\\uC218\\uB85C \\uB9CC\\uB4ED\\uB2C8\\uB2E4.\\nconst negate = (num) => {\\n  return num * -1;\\n}\\n\\n// \\uC22B\\uC790\\uC5D0 \\uB354\\uD558\\uAE30 1\\uC744 \\uD569\\uB2C8\\uB2E4.\\nconst inc = (num) => {\\n  return num + 1;\\n}\\n\\nconst myComposedFunc = compose(\\n  (num /* -16 */) => inc(num), // -15\\n  (num /* 16 */) => negate(num), // -16\\n  (num1 /* 2 */, num2 /* 4 */) => pow(num1, num2) // 16\\n)\\n\\nmyComposedFunc(2, 4); // -15\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"그냥 합성\\\"\",\n    \"subtitle\": \"\\\"그냥\",\n    \"합성\\\"\": true\n  }, \"inc(negate(pow(2, 4)));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"compose 합성\\\"\",\n    \"subtitle\": \"\\\"compose\",\n    \"합성\\\"\": true\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Pointfree Style\"), mdx(\"p\", null, \"\\uD3EC\\uC778\\uD2B8\\uD504\\uB9AC \\uC2A4\\uD0C0\\uC77C\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/point-free-1.js\",\n    \"file\": \"./src/FunctionComposition/point-free-1.js\"\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"2[3:11],3[3:11],4[3:18] file=./src/FunctionComposition/point-free-1.js subtitle=\\\"거슬리는 부분들\\\"\",\n    \"2[3:11],3[3:11],4[3:18]\": true,\n    \"file\": \"./src/FunctionComposition/point-free-1.js\",\n    \"subtitle\": \"\\\"거슬리는\",\n    \"부분들\\\"\": true\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"2[12:19] file=./src/FunctionComposition/point-free-1.js subtitle=\\\"inc 함수\\\"\",\n    \"2[12:19]\": true,\n    \"file\": \"./src/FunctionComposition/point-free-1.js\",\n    \"subtitle\": \"\\\"inc\",\n    \"함수\\\"\": true\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2 file=./src/FunctionComposition/point-free-1.js subtitle=\\\"inc를 감싼 익명 함수\\\"\",\n    \"file\": \"./src/FunctionComposition/point-free-1.js\",\n    \"subtitle\": \"\\\"inc를\",\n    \"감싼\": true,\n    \"익명\": true,\n    \"함수\\\"\": true\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2 file=./src/FunctionComposition/point-free-1.js subtitle=\\\"inc와 (num) => inc(num) 은 같다\\\"\",\n    \"file\": \"./src/FunctionComposition/point-free-1.js\",\n    \"subtitle\": \"\\\"inc와\",\n    \"(num)\": true,\n    \"\": \">\",\n    \"inc(num)\": true,\n    \"은\": true,\n    \"같다\\\"\": true\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/point-free-2.js subtitle=\\\"inc 그대로 사용 가능\\\"\",\n    \"file\": \"./src/FunctionComposition/point-free-2.js\",\n    \"subtitle\": \"\\\"inc\",\n    \"그대로\": true,\n    \"사용\": true,\n    \"가능\\\"\": true\n  }, \"compose(\\n  inc,\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/point-free-3.js subtitle=\\\"나머지 함수도 바꿔준다.\\\"\",\n    \"file\": \"./src/FunctionComposition/point-free-3.js\",\n    \"subtitle\": \"\\\"나머지\",\n    \"함수도\": true,\n    \"바꿔준다.\\\"\": true\n  }, \"compose(\\n  inc,\\n  negate,\\n  pow\\n)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/point-free-com.js\\\"\",\n    \"file\": \"./src/FunctionComposition/point-free-com.js\\\"\"\n  }, \"const myComposedFunc = compose(\\n  inc,\\n  negate,\\n  pow\\n)\\n\\nmyComposedFunc(2, 4); // -15\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Pointfree Style\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"compose(\\n  (num) => inc(num),\\n  (num) => negate(num),\\n  (num1, num2) => pow(num1, num2)\\n)(2, 4); // -15\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"compose(\\n  inc,\\n  negate,\\n  pow\\n)(2, 4); // -15\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"compose 함수는 오른쪽 -> 왼쪽으로 흐르는 함수 합성한다. 뭔가 불편...\\\"\",\n    \"subtitle\": \"\\\"compose\",\n    \"함수는\": true,\n    \"오른쪽\": true,\n    \"->\": true,\n    \"왼쪽으로\": true,\n    \"흐르는\": true,\n    \"함수\": true,\n    \"합성한다.\": true,\n    \"뭔가\": true,\n    \"불편...\\\"\": true\n  }, \"compose( inc, negate, pow )(2, 4); // -15\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/pipe-1.js subtitle=\\\"compose 구현 왼쪽 -> 오른쪽으로 실행하고 싶다.\\\"\",\n    \"file\": \"./src/FunctionComposition/pipe-1.js\",\n    \"subtitle\": \"\\\"compose\",\n    \"구현\": true,\n    \"왼쪽\": true,\n    \"->\": true,\n    \"오른쪽으로\": true,\n    \"실행하고\": true,\n    \"싶다.\\\"\": true\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduceRight(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/pipe-2.js subtitle=\\\"reduceRight를 reduce로 바꿔만 주면 된다.\\\"\",\n    \"file\": \"./src/FunctionComposition/pipe-2.js\",\n    \"subtitle\": \"\\\"reduceRight를\",\n    \"reduce로\": true,\n    \"바꿔만\": true,\n    \"주면\": true,\n    \"된다.\\\"\": true\n  }, \"const compose = (...fns) => {\\n  return (...args) => {\\n    return fns.reduce(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/FunctionComposition/pipe.js subtitle=\\\"그리고 함수 이름을 pipe로 바꿔주자.\\\"\",\n    \"file\": \"./src/FunctionComposition/pipe.js\",\n    \"subtitle\": \"\\\"그리고\",\n    \"함수\": true,\n    \"이름을\": true,\n    \"pipe로\": true,\n    \"바꿔주자.\\\"\": true\n  }, \"const pipe = (...fns) => {\\n  return (...args) => {\\n    return fns.reduce(\\n      (res, fn) => [fn.call(null, ...res)],\\n      args\\n    )[0];\\n  }\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"compose\\\"\",\n    \"subtitle\": \"\\\"compose\\\"\"\n  }, \"compose(inc, negate, pow);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"pipe\\\"\",\n    \"subtitle\": \"\\\"pipe\\\"\"\n  }, \"pipe(pow, negate, inc);\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Currying\"), mdx(\"p\", null, \"\\uCEE4\\uB9C1\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, imperativeTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\",\n    \"metastring\": \"title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. age \\uD504\\uB85C\\uD37C\\uD2F0\\uB97C \\uC9C0\\uC6B4\\uB2E4.\\n2. work \\uD504\\uB85C\\uD37C\\uD2F0 \\uBA85\\uC744 job\\uC73C\\uB85C \\uBC14\\uAFBC\\uB2E4.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"변경 전\\\"\",\n    \"title\": \"\\\"변경\",\n    \"전\\\"\": true\n  }, \"const person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"1\": true,\n    \"className\": \"language-markdown\",\n    \"metastring\": \"1 title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. age \\uD504\\uB85C\\uD37C\\uD2F0\\uB97C \\uC9C0\\uC6B4\\uB2E4.\\n2. work \\uD504\\uB85C\\uD37C\\uD2F0 \\uBA85\\uC744 job\\uC73C\\uB85C \\uBC14\\uAFBC\\uB2E4.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"변경 후\\\"\",\n    \"title\": \"\\\"변경\",\n    \"후\\\"\": true\n  }, \"const person = {\\n  name: 'theo.gt',\\n  work: 'developer'\\n};\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"2\": true,\n    \"className\": \"language-markdown\",\n    \"metastring\": \"2 title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. age \\uD504\\uB85C\\uD37C\\uD2F0\\uB97C \\uC9C0\\uC6B4\\uB2E4.\\n2. work \\uD504\\uB85C\\uD37C\\uD2F0 \\uBA85\\uC744 job\\uC73C\\uB85C \\uBC14\\uAFBC\\uB2E4.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"변경 후\\\"\",\n    \"title\": \"\\\"변경\",\n    \"후\\\"\": true\n  }, \"const person = {\\n  name: 'theo.gt',\\n  job: 'developer'\\n};\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/without-cyrring-1.js subtitle=\\\"dissoc과 rename 함수를 정의\\\"\",\n    \"file\": \"./src/Currying/without-cyrring-1.js\",\n    \"subtitle\": \"\\\"dissoc과\",\n    \"rename\": true,\n    \"함수를\": true,\n    \"정의\\\"\": true\n  }, \"const dissoc = (dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n};\\n\\n\\nconst rename = (keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/without-cyrring-2.js subtitle=\\\"pipe를 이용해서 구현\\\"\",\n    \"file\": \"./src/Currying/without-cyrring-2.js\",\n    \"subtitle\": \"\\\"pipe를\",\n    \"이용해서\": true,\n    \"구현\\\"\": true\n  }, \"const dissoc = (dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n};\\n\\n\\nconst rename = (keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  (person) => dissoc('age', person),\\n  (person) => rename({work: 'job'}, person)\\n)(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"17,18 file=./src/Currying/without-cyrring-2.js subtitle=\\\"파라미터가 2개여서 Pointfree Style을 사용할수 없다. 지저분해진다.\\\"\",\n    \"17,18\": true,\n    \"file\": \"./src/Currying/without-cyrring-2.js\",\n    \"subtitle\": \"\\\"파라미터가\",\n    \"2개여서\": true,\n    \"Pointfree\": true,\n    \"Style을\": true,\n    \"사용할수\": true,\n    \"없다.\": true,\n    \"지저분해진다.\\\"\": true\n  }, \"const dissoc = (dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n};\\n\\n\\nconst rename = (keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  (person) => dissoc('age', person),\\n  (person) => rename({work: 'job'}, person)\\n)(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"17,18 file=./src/Currying/without-cyrring-2.js subtitle=\\\"파라미터를 하나로 만들수만 있다면 Pointfree Style을 사용할 수 있다.\\\"\",\n    \"17,18\": true,\n    \"file\": \"./src/Currying/without-cyrring-2.js\",\n    \"subtitle\": \"\\\"파라미터를\",\n    \"하나로\": true,\n    \"만들수만\": true,\n    \"있다면\": true,\n    \"Pointfree\": true,\n    \"Style을\": true,\n    \"사용할\": true,\n    \"수\": true,\n    \"있다.\\\"\": true\n  }, \"const dissoc = (dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n};\\n\\n\\nconst rename = (keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  (person) => dissoc('age', person),\\n  (person) => rename({work: 'job'}, person)\\n)(person);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Currying\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD30C\\uB77C\\uBBF8\\uD130\\uB97C \\uBAA8\\uB450 \\uCC44\\uC6B0\\uC9C0 \\uC54A\\uB294 \\uD55C \\uD568\\uC218\\uB85C \\uB0A8\\uC544\\uC788\\uACA0\\uB2E4.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-1.js subtitle=\\\"dissoc은 파라미터 두개를 받는다.\\\"\",\n    \"file\": \"./src/Currying/with-currying-1.js\",\n    \"subtitle\": \"\\\"dissoc은\",\n    \"파라미터\": true,\n    \"두개를\": true,\n    \"받는다.\\\"\": true\n  }, \"const dissoc = (dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n};\\n\\ndissoc('age', person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-2.js subtitle=\\\"첫 번째 파라미터를 미리 받고 나머지 파라미터를 나중에 받아서 실행할 수 있다면 좋겠다.\\\"\",\n    \"file\": \"./src/Currying/with-currying-2.js\",\n    \"subtitle\": \"\\\"첫\",\n    \"번째\": true,\n    \"파라미터를\": true,\n    \"미리\": true,\n    \"받고\": true,\n    \"나머지\": true,\n    \"나중에\": true,\n    \"받아서\": true,\n    \"실행할\": true,\n    \"수\": true,\n    \"있다면\": true,\n    \"좋겠다.\\\"\": true\n  }, \"const dissocAge = dissoc('age');\\n\\ndissocAge(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-3.js subtitle=\\\"파라미터 하나를 받아서 두 번째 파라미터를 받는 새로운 함수를 반환해주자.\\\"\",\n    \"file\": \"./src/Currying/with-currying-3.js\",\n    \"subtitle\": \"\\\"파라미터\",\n    \"하나를\": true,\n    \"받아서\": true,\n    \"두\": true,\n    \"번째\": true,\n    \"파라미터를\": true,\n    \"받는\": true,\n    \"새로운\": true,\n    \"함수를\": true,\n    \"반환해주자.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst dissocAge = dissoc('age');\\n\\ndissocAge(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-4.js subtitle=\\\"rename도 같은 방식으로 바꿔주자.\\\"\",\n    \"file\": \"./src/Currying/with-currying-4.js\",\n    \"subtitle\": \"\\\"rename도\",\n    \"같은\": true,\n    \"방식으로\": true,\n    \"바꿔주자.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:17 file=./src/Currying/with-currying-5.js subtitle=\\\"처음으로 돌아가자\\\"\",\n    \"1:17\": true,\n    \"file\": \"./src/Currying/with-currying-5.js\",\n    \"subtitle\": \"\\\"처음으로\",\n    \"돌아가자\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-6.js subtitle=\\\"dissoc에 지워주고 싶은 age를 미리 넣어주면 person만 받을 수 있는 함수가 된다.\\\"\",\n    \"file\": \"./src/Currying/with-currying-6.js\",\n    \"subtitle\": \"\\\"dissoc에\",\n    \"지워주고\": true,\n    \"싶은\": true,\n    \"age를\": true,\n    \"미리\": true,\n    \"넣어주면\": true,\n    \"person만\": true,\n    \"받을\": true,\n    \"수\": true,\n    \"있는\": true,\n    \"함수가\": true,\n    \"된다.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  \\n)(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-7.js subtitle=\\\"깔끔하게 dissoc을 사용할 수 있다.\\\"\",\n    \"file\": \"./src/Currying/with-currying-7.js\",\n    \"subtitle\": \"\\\"깔끔하게\",\n    \"dissoc을\": true,\n    \"사용할\": true,\n    \"수\": true,\n    \"있다.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  dissoc('age'),\\n)(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-currying-8.js subtitle=\\\"rename도 바꿔주고 싶은 property명을 미리 넘겨주자. Pointfree Style로 깔끔해졌다.\\\"\",\n    \"file\": \"./src/Currying/with-currying-8.js\",\n    \"subtitle\": \"\\\"rename도\",\n    \"바꿔주고\": true,\n    \"싶은\": true,\n    \"property명을\": true,\n    \"미리\": true,\n    \"넘겨주자.\": true,\n    \"Pointfree\": true,\n    \"Style로\": true,\n    \"깔끔해졌다.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  dissoc('age'),\\n  rename({work: 'job'}),\\n)(person);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1,2,7,8 file=./src/Currying/with-currying-8.js subtitle=\\\"Currying: 파라미터를 모두 채우지 않는 한 함수로 남아있겠다.\\\"\",\n    \"1,2,7,8\": true,\n    \"file\": \"./src/Currying/with-currying-8.js\",\n    \"subtitle\": \"\\\"Currying:\",\n    \"파라미터를\": true,\n    \"모두\": true,\n    \"채우지\": true,\n    \"않는\": true,\n    \"한\": true,\n    \"함수로\": true,\n    \"남아있겠다.\\\"\": true\n  }, \"const dissoc = (dissocKey) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst rename = (keysMap) => {\\n  return (obj) => {\\n    // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n  }\\n};\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  dissoc('age'),\\n  rename({work: 'job'}),\\n)(person);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/currying.js\",\n    \"file\": \"./src/Currying/currying.js\"\n  }, \"const curry = (fn) => {\\n  const arity = fn.length;\\n  \\n  return function _curry(...args) {\\n    if (args.length < arity) {\\n      return _curry.bind(null, ...args);\\n    }\\n\\n    return fn.call(null, ...args);\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"5:7 file=./src/Currying/currying.js subtitle=\\\"파라미터 수가 부족하면 일부만 바인딩\\\"\",\n    \"5:7\": true,\n    \"file\": \"./src/Currying/currying.js\",\n    \"subtitle\": \"\\\"파라미터\",\n    \"수가\": true,\n    \"부족하면\": true,\n    \"일부만\": true,\n    \"바인딩\\\"\": true\n  }, \"const curry = (fn) => {\\n  const arity = fn.length;\\n  \\n  return function _curry(...args) {\\n    if (args.length < arity) {\\n      return _curry.bind(null, ...args);\\n    }\\n\\n    return fn.call(null, ...args);\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"9\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"9 file=./src/Currying/currying.js subtitle=\\\"파라미터 수가 맞으면 실행\\\"\",\n    \"file\": \"./src/Currying/currying.js\",\n    \"subtitle\": \"\\\"파라미터\",\n    \"수가\": true,\n    \"맞으면\": true,\n    \"실행\\\"\": true\n  }, \"const curry = (fn) => {\\n  const arity = fn.length;\\n  \\n  return function _curry(...args) {\\n    if (args.length < arity) {\\n      return _curry.bind(null, ...args);\\n    }\\n\\n    return fn.call(null, ...args);\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 file=./src/Currying/with-curry-func.js\",\n    \"1:7\": true,\n    \"file\": \"./src/Currying/with-curry-func.js\"\n  }, \"const dissoc = curry((dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n});\\n\\nconst rename = curry((keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n});\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  dissoc('age'),\\n  rename({work: 'job'}),\\n)(person);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uD568\\uC218\\uD615 \\uC2A4\\uD0C0\\uC77C \\uBE44\\uAD50\"), mdx(\"p\", null, \"\\uBA54\\uC18C\\uB4DC \\uCCB4\\uC774\\uB2DD vs \\uD30C\\uC774\\uD504\\uB77C\\uC774\\uB2DD\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-ex.js title=\\\"메소드 체이닝\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-ex.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true\n  }, \"import _ from 'lodash';\\n\\n_.chain(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-ex-2.js title=\\\"메소드 체이닝\\\" subtitle=\\\"LodashWrapper\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-ex-2.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true,\n    \"subtitle\": \"\\\"LodashWrapper\\\"\"\n  }, \"import _ from 'lodash';\\n\\n_.chain(names) // LodashWrapper(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\"\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3:5,9 file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\"\",\n    \"3:5,9\": true,\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\"\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-ex.js title=\\\"메소드 체이닝\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-ex.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true\n  }, \"import _ from 'lodash';\\n\\n_.chain(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\"\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4[3:6],5[3:6],6[3:7],7[3:8] file=./src/CodeStyle/chaining-ex.js title=\\\"메소드 체이닝\\\"\",\n    \"4[3:6],5[3:6],6[3:7],7[3:8]\": true,\n    \"file\": \"./src/CodeStyle/chaining-ex.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true\n  }, \"import _ from 'lodash';\\n\\n_.chain(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8[3:7],9[3:7],10[3:10] file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\"\",\n    \"8[3:7],9[3:7],10[3:10]\": true,\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\"\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-ex.js title=\\\"메소드 체이닝\\\" subtitle=\\\"단단한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-ex.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true,\n    \"subtitle\": \"\\\"단단한\",\n    \"결합\\\"\": true\n  }, \"import _ from 'lodash';\\n\\n_.chain(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\" subtitle=\\\"느슨한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\",\n    \"subtitle\": \"\\\"느슨한\",\n    \"결합\\\"\": true\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-ex.js title=\\\"메소드 체이닝\\\" subtitle=\\\"제한된 표현성\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-ex.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true,\n    \"subtitle\": \"\\\"제한된\",\n    \"표현성\\\"\": true\n  }, \"import _ from 'lodash';\\n\\n_.chain(names)\\n  .map(name => name.replace(/()_|-/, \\\" \\\"))\\n  .map(_.startCase)\\n  .sort()\\n  .value();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-ex.js title=\\\"파이프라이닝\\\" subtitle=\\\"유연함\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-ex.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\",\n    \"subtitle\": \"\\\"유연함\\\"\"\n  }, \"import R from 'ramda';\\n\\nconst startCase = (str) => {\\n  return R.replace(/(\\\\b\\\\w(?!\\\\s))/g, R.toUpper, str);\\n}\\n\\nR.pipe(\\n  R.map(R.replace(/(_|-)/, ' ')),\\n  R.map(startCase),\\n  R.sortBy(R.identity)\\n)(names);\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, imperativeTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\",\n    \"metastring\": \"title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. age \\uD504\\uB85C\\uD37C\\uD2F0\\uB97C \\uC9C0\\uC6B4\\uB2E4.\\n2. work \\uD504\\uB85C\\uD37C\\uD2F0 \\uBA85\\uC744 job\\uC73C\\uB85C \\uBC14\\uAFBC\\uB2E4.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"변경 대상\\\"\",\n    \"title\": \"\\\"변경\",\n    \"대상\\\"\": true\n  }, \"const person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-1.js title=\\\"메소드 체이닝\\\" subtitle=\\\"Lodash Wrapper로 만들어준다\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-1.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true,\n    \"subtitle\": \"\\\"Lodash\",\n    \"Wrapper로\": true,\n    \"만들어준다\\\"\": true\n  }, \"_.chain(person)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-1.js title=\\\"파이프라이닝\\\" subtitle=\\\"pipe의 시작 파라미터로 만들어준다\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-1.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\",\n    \"subtitle\": \"\\\"pipe의\",\n    \"시작\": true,\n    \"파라미터로\": true,\n    \"만들어준다\\\"\": true\n  }, \"R.pipe(\\n  \\n)(person)\\n\"))), mdx(Step, {\n    subtitle: \"lodash\\uC640 ramda\\uC758 omit\\uC73C\\uB85C age\\uB97C \\uC9C0\\uC6B4\\uB2E4\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-2.js title=\\\"메소드 체이닝\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-2.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true\n  }, \"_.chain(person)\\n  .omit(['age'])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-2.js title=\\\"파이프라이닝\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-2.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\"\n  }, \"R.pipe(\\n  R.omit(['age']),\\n)(person)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-3.js title=\\\"메소드 체이닝\\\" subtitle=\\\"rename 함수를 끼워 넣을 수 없다.\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-3.js\",\n    \"title\": \"\\\"메소드\",\n    \"체이닝\\\"\": true,\n    \"subtitle\": \"\\\"rename\",\n    \"함수를\": true,\n    \"끼워\": true,\n    \"넣을\": true,\n    \"수\": true,\n    \"없다.\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\n_.chain(person)\\n  .omit(['age'])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-com.js title=\\\"파이프라이닝\\\" subtitle=\\\"rename 함수를 정의해서 끼워준다.\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-com.js\",\n    \"title\": \"\\\"파이프라이닝\\\"\",\n    \"subtitle\": \"\\\"rename\",\n    \"함수를\": true,\n    \"정의해서\": true,\n    \"끼워준다.\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nR.pipe(\\n  R.omit(['age']),\\n  rename({work: 'job'}),\\n)(person)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-com.js  subtitle=\\\"age까지만 제거하고 계산한 후 마지막에 rename을 다시 적용한다.\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-com.js\",\n    \"\": true,\n    \"subtitle\": \"\\\"age까지만\",\n    \"제거하고\": true,\n    \"계산한\": true,\n    \"후\": true,\n    \"마지막에\": true,\n    \"rename을\": true,\n    \"다시\": true,\n    \"적용한다.\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nconst omittedAge = _.chain(person)\\n  .omit(['age'])\\n  .value()\\n\\nconst result = rename({work: 'job'}, omittedAge)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-com.js\",\n    \"file\": \"./src/CodeStyle/pipelining-com.js\"\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nR.pipe(\\n  R.omit(['age']),\\n  rename({work: 'job'}),\\n)(person)\\n\"))), mdx(Step, {\n    subtitle: \"\\uBA54\\uC18C\\uB4DC \\uCCB4\\uC774\\uB2DD\\uC740 \\uC81C\\uACF5\\uB418\\uC9C0 \\uC54A\\uB294 \\uBA54\\uC18C\\uB4DC \\uC678\\uC5D0\\uB294 \\uC774\\uC5B4\\uC11C \\uBD99\\uC77C \\uC218 \\uC5C6\\uB2E4.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-com.js\",\n    \"file\": \"./src/CodeStyle/chaining-com.js\"\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nconst omittedAge = _.chain(person)\\n  .omit(['age'])\\n  .value()\\n\\nconst result = rename({work: 'job'}, omittedAge)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-com.js\",\n    \"file\": \"./src/CodeStyle/pipelining-com.js\"\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nR.pipe(\\n  R.omit(['age']),\\n  rename({work: 'job'}),\\n)(person)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-com.js subtitle=\\\"단단한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-com.js\",\n    \"subtitle\": \"\\\"단단한\",\n    \"결합\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nconst omittedAge = _.chain(person)\\n  .omit(['age'])\\n  .value()\\n\\nconst result = rename({work: 'job'}, omittedAge)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-com.js subtitle=\\\"느슨한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-com.js\",\n    \"subtitle\": \"\\\"느슨한\",\n    \"결합\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nR.pipe(\\n  R.omit(['age']),\\n  rename({work: 'job'}),\\n)(person)\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Functor\"), mdx(\"p\", null, \"\\uD391\\uD130\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-1.js subtitle=\\\"상자를 하나 만듭니다.\\\"\",\n    \"file\": \"./src/Functor/box-1.js\",\n    \"subtitle\": \"\\\"상자를\",\n    \"하나\": true,\n    \"만듭니다.\\\"\": true\n  }, \"class Box {\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-2.js subtitle=\\\"값 저장\\\"\",\n    \"file\": \"./src/Functor/box-2.js\",\n    \"subtitle\": \"\\\"값\",\n    \"저장\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-3.js subtitle=\\\"Box 인스턴스\\\"\",\n    \"file\": \"./src/Functor/box-3.js\",\n    \"subtitle\": \"\\\"Box\",\n    \"인스턴스\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst box1 = new Box('FP'); // Box('FP');\\nconst box2 = Box.of('FP2'); // Box('FP2');\\nconst box3 = Box.of(Box.of('FP3')); // Box(Box('FP3'));\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, imperativeTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\",\n    \"metastring\": \"title=\\\"요구사항\\\"\",\n    \"title\": \"\\\"요구사항\\\"\"\n  }, \"1. id\\uB97C \\uC774\\uC6A9\\uD574\\uC11C \\uCC45 \\uCC3E\\uAE30.\\n2. \\uCC3E\\uC740 \\uCC45\\uC758 \\uC81C\\uBAA9 \\uCCAB\\uAE00\\uC790\\uB97C \\uB300\\uBB38\\uC790\\uB85C \\uBCC0\\uACBD\\uD558\\uAE30.\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"title=\\\"책 목록\\\"\",\n    \"title\": \"\\\"책\",\n    \"목록\\\"\": true\n  }, \"[\\n  { \\n    \\\"id\\\": \\\"book1\\\", \\n    \\\"title\\\": \\\"coding with javascript\\\" \\n    },\\n  { \\n    \\\"id\\\": \\\"book2\\\", \\n    \\\"title\\\": \\\"speaking javaScript\\\"\\n  },\\n];\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-4.js\",\n    \"file\": \"./src/Functor/box-4.js\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-5.js subtitle=\\\"첫 글자 대문자 변환\\\"\",\n    \"file\": \"./src/Functor/box-5.js\",\n    \"subtitle\": \"\\\"첫\",\n    \"글자\": true,\n    \"대문자\": true,\n    \"변환\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-6.js subtitle=\\\"property 값 반환\\\"\",\n    \"file\": \"./src/Functor/box-6.js\",\n    \"subtitle\": \"\\\"property\",\n    \"값\": true,\n    \"반환\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-7.js subtitle=\\\"id와 책 목록을 받아서 id에 해당하는 책 반환\\\"\",\n    \"file\": \"./src/Functor/box-7.js\",\n    \"subtitle\": \"\\\"id와\",\n    \"책\": true,\n    \"목록을\": true,\n    \"받아서\": true,\n    \"id에\": true,\n    \"해당하는\": true,\n    \"반환\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-8.js subtitle=\\\"원하는 결과를 만들 함수 정의\\\"\",\n    \"file\": \"./src/Functor/box-8.js\",\n    \"subtitle\": \"\\\"원하는\",\n    \"결과를\": true,\n    \"만들\": true,\n    \"함수\": true,\n    \"정의\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  \\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-9.js subtitle=\\\"박스에 책 목록을 넣어줍니다.\\\"\",\n    \"file\": \"./src/Functor/box-9.js\",\n    \"subtitle\": \"\\\"박스에\",\n    \"책\": true,\n    \"목록을\": true,\n    \"넣어줍니다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-10.js subtitle=\\\"박스에 저장된 책 목록을 가지고 책을 찾아줍니다.\\\"\",\n    \"file\": \"./src/Functor/box-10.js\",\n    \"subtitle\": \"\\\"박스에\",\n    \"저장된\": true,\n    \"책\": true,\n    \"목록을\": true,\n    \"가지고\": true,\n    \"책을\": true,\n    \"찾아줍니다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-11.js subtitle=\\\"찾은 책에서 title 값을 가져옵니다.\\\"\",\n    \"file\": \"./src/Functor/box-11.js\",\n    \"subtitle\": \"\\\"찾은\",\n    \"책에서\": true,\n    \"title\": true,\n    \"값을\": true,\n    \"가져옵니다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-12.1.js subtitle=\\\"앞글자만 대문자로 바꿔줍니다.\\\"\",\n    \"file\": \"./src/Functor/box-12.1.js\",\n    \"subtitle\": \"\\\"앞글자만\",\n    \"대문자로\": true,\n    \"바꿔줍니다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"33\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"33 file=./src/Functor/box-12.1.js subtitle=\\\"앞글자만 대문자로 바꿔줍니다.\\\"\",\n    \"file\": \"./src/Functor/box-12.1.js\",\n    \"subtitle\": \"\\\"앞글자만\",\n    \"대문자로\": true,\n    \"바꿔줍니다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"31\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"31 file=./src/Functor/box-12.1.js subtitle=\\\"box.\\\\$value\\\"\",\n    \"file\": \"./src/Functor/box-12.1.js\",\n    \"subtitle\": \"\\\"box.\\\\$value\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:9 file=./src/Functor/box-12.1.js subtitle=\\\"상자에 특별한 기능을 넣어봅시다.\\\"\",\n    \"1:9\": true,\n    \"file\": \"./src/Functor/box-12.1.js\",\n    \"subtitle\": \"\\\"상자에\",\n    \"특별한\": true,\n    \"기능을\": true,\n    \"넣어봅시다.\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-13.js subtitle=\\\"map 메소드 추가\\\"\",\n    \"file\": \"./src/Functor/box-13.js\",\n    \"subtitle\": \"\\\"map\",\n    \"메소드\": true,\n    \"추가\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"10[7:8] file=./src/Functor/box-13.js subtitle=\\\"파라미터로 함수\\\"\",\n    \"10[7:8]\": true,\n    \"file\": \"./src/Functor/box-13.js\",\n    \"subtitle\": \"\\\"파라미터로\",\n    \"함수\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"11[20:34] file=./src/Functor/box-13.js subtitle=\\\"받은 함수를 박스 안의 값에 적용\\\"\",\n    \"11[20:34]\": true,\n    \"file\": \"./src/Functor/box-13.js\",\n    \"subtitle\": \"\\\"받은\",\n    \"함수를\": true,\n    \"박스\": true,\n    \"안의\": true,\n    \"값에\": true,\n    \"적용\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"11 file=./src/Functor/box-13.js subtitle=\\\"함수 결과 값을 다시 한번 박스에 넣고 반환\\\"\",\n    \"file\": \"./src/Functor/box-13.js\",\n    \"subtitle\": \"\\\"함수\",\n    \"결과\": true,\n    \"값을\": true,\n    \"다시\": true,\n    \"한번\": true,\n    \"박스에\": true,\n    \"넣고\": true,\n    \"반환\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-1.1.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-1.1.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-1.2.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-1.2.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(1)\\nBox.of(1)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-1.3.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-1.3.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(6)\\nBox.of(1)\\n  .map(addFive)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-1.4.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-1.4.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(11)\\nBox.of(1)\\n  .map(addFive)\\n  .map(addFive)\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"23,26 file=./src/Functor/map-1.4.js subtitle=\\\"\\\"\",\n    \"23,26\": true,\n    \"file\": \"./src/Functor/map-1.4.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(11)\\nBox.of(1)\\n  .map(addFive)\\n  .map(addFive)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-2.1.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-2.1.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(11)\\nBox.of(1)\\n  .map(addFive)\\n  .map(addFive)\\n\\n// Box('hello, FP')\\nBox.of('hello, FP')\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/map-2.2.js subtitle=\\\"\\\"\",\n    \"file\": \"./src/Functor/map-2.2.js\",\n    \"subtitle\": \"\\\"\\\"\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst addFive = (num) => {\\n  return num + 5;\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\n// Box(11)\\nBox.of(1)\\n  .map(addFive)\\n  .map(addFive)\\n\\n// Box('Hello, FP')\\nBox.of('hello, FP')\\n  .map(startCase)\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Functor\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uAC19\\uC740 \\uD0C0\\uC785\\uC744 \\uBC18\\uD658\\uD558\\uB294 map \\uBA54\\uC18C\\uB4DC\\uB97C \\uAD6C\\uD604\\uD55C \\uAC1D\\uCCB4\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"32:39 file=./src/Functor/box-13.js subtitle=\\\"map 사용해서 다시 구현\\\"\",\n    \"32:39\": true,\n    \"file\": \"./src/Functor/box-13.js\",\n    \"subtitle\": \"\\\"map\",\n    \"사용해서\": true,\n    \"다시\": true,\n    \"구현\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-14.js\",\n    \"file\": \"./src/Functor/box-14.js\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst map = curry((fn, functor) => {\\n  return functor.map(fn);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    (box) => findBookById(id, box.$value),\\n    prop('title'),\\n    startCase\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-15.js\",\n    \"file\": \"./src/Functor/box-15.js\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst map = curry((fn, functor) => {\\n  return functor.map(fn);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-16.js\",\n    \"file\": \"./src/Functor/box-16.js\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst map = curry((fn, functor) => {\\n  return functor.map(fn);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(book)\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-17.js\",\n    \"file\": \"./src/Functor/box-17.js\"\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst map = curry((fn, functor) => {\\n  return functor.map(fn);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(book)\\n    map(prop('title')), // Box('book title')\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Functor/box-18.js subtitle=\\\"상자를 유지한채로 목적 달성\\\"\",\n    \"file\": \"./src/Functor/box-18.js\",\n    \"subtitle\": \"\\\"상자를\",\n    \"유지한채로\": true,\n    \"목적\": true,\n    \"달성\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst findBookById = curry((id, books) => {\\n  return books.find((book) => book.id === id);\\n});\\n\\nconst map = curry((fn, functor) => {\\n  return functor.map(fn);\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(book)\\n    map(prop('title')), // Box('book title')\\n    map(startCase), // Box('Book title')\\n  )(books);\\n};\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uD391\\uD130\\uB97C \\uC65C \\uC0AC\\uC6A9\\uD560\\uAE4C?\"), mdx(\"p\", null, \"\\uAD73\\uC774 \\uD391\\uD130\\uC5D0 \\uAC12\\uC744 \\uB123\\uC5B4\\uC11C \\uC0AC\\uC6A9\\uD558\\uB294 \\uBAA9\\uC801\\uC774 \\uBB58\\uAE4C?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/problem-1.1.js subtitle=\\\"책이 두 권\\\"\",\n    \"file\": \"./src/Maybe/problem-1.1.js\",\n    \"subtitle\": \"\\\"책이\",\n    \"두\": true,\n    \"권\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/problem-1.2.js subtitle=\\\"없는 책은 에러\\\"\",\n    \"file\": \"./src/Maybe/problem-1.2.js\",\n    \"subtitle\": \"\\\"없는\",\n    \"책은\": true,\n    \"에러\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/problem-1.3.js subtitle=\\\"findBookById가 undefined 반환\\\"\",\n    \"file\": \"./src/Maybe/problem-1.3.js\",\n    \"subtitle\": \"\\\"findBookById가\",\n    \"undefined\": true,\n    \"반환\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"7:8 file=./src/Maybe/problem-1.4.js subtitle=\\\"undefined에서 title을 참조\\\"\",\n    \"7:8\": true,\n    \"file\": \"./src/Maybe/problem-1.4.js\",\n    \"subtitle\": \"\\\"undefined에서\",\n    \"title을\": true,\n    \"참조\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  // undefined['title']\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/problem-1.5.js\",\n    \"file\": \"./src/Maybe/problem-1.5.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  // undefined['title']\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Cannot read property 'title' of undefined\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"6:9 file=./src/Maybe/problem-1.5.js subtitle=\\\"prop 함수에서 에러가 났으니 prop 함수를 고쳐주자\\\"\",\n    \"6:9\": true,\n    \"file\": \"./src/Maybe/problem-1.5.js\",\n    \"subtitle\": \"\\\"prop\",\n    \"함수에서\": true,\n    \"에러가\": true,\n    \"났으니\": true,\n    \"prop\": true,\n    \"함수를\": true,\n    \"고쳐주자\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  // undefined['title']\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Cannot read property 'title' of undefined\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/lazy-solution-1.js subtitle=\\\"obj 먼저 확인\\\"\",\n    \"file\": \"./src/Maybe/lazy-solution-1.js\",\n    \"subtitle\": \"\\\"obj\",\n    \"먼저\": true,\n    \"확인\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj && obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Cannot read property 'title' of undefined\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/lazy-solution-2.js subtitle=\\\"그래도 에러\\\"\",\n    \"file\": \"./src/Maybe/lazy-solution-2.js\",\n    \"subtitle\": \"\\\"그래도\",\n    \"에러\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj && obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Box(undefined)\\n    map(startCase), // Cannot read property 'charAt' of undefined\\n  )(books);\\n};\\n\\n// Cannot read property 'charAt' of undefined\\ngetUpperBookTitleById('book3', books);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Maybe\"), mdx(\"p\", null, \"\\uC6B0\\uC544\\uD55C \\uC5D0\\uB7EC \\uCC98\\uB9AC\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [imperativeTheme, fpTheme],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Maybe\\uC758 \\uC0C1\\uD0DC\\uB294 \\uB450 \\uAC00\\uC9C0 \\uAC12\\uC744 \\uAC16\\uB294\\uB2E4\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\"\n  }, \"Nothing\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\"\n  }, \"Just\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"값이 null or undefined\\\"\",\n    \"subtitle\": \"\\\"값이\",\n    \"null\": true,\n    \"or\": true,\n    \"undefined\\\"\": true\n  }, \"Maybe.of(null) // Nothing\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"값이 null or undefined 이 아닌 값\\\"\",\n    \"subtitle\": \"\\\"값이\",\n    \"null\": true,\n    \"or\": true,\n    \"undefined\": true,\n    \"이\": true,\n    \"아닌\": true,\n    \"값\\\"\": true\n  }, \"Maybe.of('Hello, FP') // Just('Hello, FP')\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.1.js subtitle=\\\"Box 펑터\\\"\",\n    \"file\": \"./src/Maybe/maybe-1.1.js\",\n    \"subtitle\": \"\\\"Box\",\n    \"펑터\\\"\": true\n  }, \"class Box {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Box(value);\\n  }\\n\\n  map(fn) {\\n    return new Box(fn(this.$value));\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.2.js\",\n    \"file\": \"./src/Maybe/maybe-1.2.js\"\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  map(fn) {\\n    return new Maybe(fn(this.$value));\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.3.js subtitle=\\\"Maybe 상태\\\"\",\n    \"file\": \"./src/Maybe/maybe-1.3.js\",\n    \"subtitle\": \"\\\"Maybe\",\n    \"상태\\\"\": true\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return new Maybe(fn(this.$value));\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.4.js subtitle=\\\"상태에 따른 map 동작\\\"\",\n    \"file\": \"./src/Maybe/maybe-1.4.js\",\n    \"subtitle\": \"\\\"상태에\",\n    \"따른\": true,\n    \"map\": true,\n    \"동작\\\"\": true\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"30\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"30 file=./src/Maybe/maybe-1.5.js\",\n    \"file\": \"./src/Maybe/maybe-1.5.js\"\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Cannot read property 'title' of undefined\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"30\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"30 file=./src/Maybe/maybe-1.5.js\",\n    \"file\": \"./src/Maybe/maybe-1.5.js\"\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Box.of, // Box(books)\\n    map(findBookById(id)), // Box(undefined)\\n    map(prop('title')), // Cannot read property 'title' of undefined\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Cannot read property 'title' of undefined\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"30\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"30 file=./src/Maybe/maybe-1.6.js\",\n    \"file\": \"./src/Maybe/maybe-1.6.js\"\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of, // Just(books)\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.7.js\",\n    \"file\": \"./src/Maybe/maybe-1.7.js\"\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of, // Just(books)\\n    map(findBookById(id)), // Nothing\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"15\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"15 file=./src/Maybe/maybe-1.7.js subtitle=\\\"Nothing은 map을 건너뛴다\\\"\",\n    \"file\": \"./src/Maybe/maybe-1.7.js\",\n    \"subtitle\": \"\\\"Nothing은\",\n    \"map을\": true,\n    \"건너뛴다\\\"\": true\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of, // Just(books)\\n    map(findBookById(id)), // Nothing\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\ngetUpperBookTitleById('book3', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/maybe-1.8.js subtitle=\\\"에러 없이 프로그램 정상 종료\\\"\",\n    \"file\": \"./src/Maybe/maybe-1.8.js\",\n    \"subtitle\": \"\\\"에러\",\n    \"없이\": true,\n    \"프로그램\": true,\n    \"정상\": true,\n    \"종료\\\"\": true\n  }, \"class Maybe {\\n  constructor(value) {\\n    this.$value = value;\\n  }\\n\\n  static of(value) {\\n    return new Maybe(value);\\n  }\\n\\n  get isNothing() {\\n    return this.$value === null || this.$value === undefined;\\n  }\\n\\n  map(fn) {\\n    return this.isNothing ? this : Maybe.of(fn(this.$value));\\n  }\\n}\\n\\nconst books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst prop = curry((propName, obj) => {\\n  return obj[propName];\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of, // Just(books)\\n    map(findBookById(id)), // Nothing\\n    map(prop('title')), // Nothing\\n    map(startCase), // Nothing\\n  )(books);\\n};\\n\\n // Nothing\\ngetUpperBookTitleById('book3', books);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Railway Oriented Programming\"), mdx(Image, {\n    src: roo,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-1.js\",\n    \"file\": \"./src/Maybe/get-or-else-1.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Just('Coading with javascript')\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"15,16 file=./src/Maybe/get-or-else-1.js subtitle=\\\"결과 값은 Maybe 펑터\\\"\",\n    \"15,16\": true,\n    \"file\": \"./src/Maybe/get-or-else-1.js\",\n    \"subtitle\": \"\\\"결과\",\n    \"값은\": true,\n    \"Maybe\": true,\n    \"펑터\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Just('Coading with javascript')\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-2.js\",\n    \"file\": \"./src/Maybe/get-or-else-2.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Just('Coading with javascript')\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"7[10:39] file=./src/Maybe/get-or-else-2.js subtitle=\\\"Nothing이면 기본 값\\\"\",\n    \"7[10:39]\": true,\n    \"file\": \"./src/Maybe/get-or-else-2.js\",\n    \"subtitle\": \"\\\"Nothing이면\",\n    \"기본\": true,\n    \"값\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Just('Coading with javascript')\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"7[43:54] file=./src/Maybe/get-or-else-2.js subtitle=\\\"Just면 값 반환\\\"\",\n    \"7[43:54]\": true,\n    \"file\": \"./src/Maybe/get-or-else-2.js\",\n    \"subtitle\": \"\\\"Just면\",\n    \"값\": true,\n    \"반환\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n  )(books);\\n};\\n\\n// Just('Coading with javascript')\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-3.js\",\n    \"file\": \"./src/Maybe/get-or-else-3.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n    getOrElse(`${id} Not Found`)\\n  )(books);\\n};\\n\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-4.js\",\n    \"file\": \"./src/Maybe/get-or-else-4.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n    getOrElse(`${id} Not Found`)\\n  )(books);\\n};\\n\\n// Coading with javascript\\ngetUpperBookTitleById('book1', books);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-5.js\",\n    \"file\": \"./src/Maybe/get-or-else-5.js\"\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n    getOrElse(`${id} Not Found`)\\n  )(books);\\n};\\n\\n// Coading with javascript\\ngetUpperBookTitleById('book1', books);\\n\\n// book3 Not Found\\ngetUpperBookTitleById('book3', books);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:22 file=./src/CodeStyle/fp-com.js title=\\\"함수형 프로그래밍 스타일\\\"\",\n    \"5:22\": true,\n    \"file\": \"./src/CodeStyle/fp-com.js\",\n    \"title\": \"\\\"함수형\",\n    \"프로그래밍\": true,\n    \"스타일\\\"\": true\n  }, \"const names = [\\n  // ...\\n];\\n\\nconst replaceSpace = (str) => {\\n  return str.replace(/(_|-)/, ' ');\\n}\\n\\nconst startCase = (str) => {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n}\\n\\nconst changePartStartCase = (str) => {\\n  return str.split(' ').map(startCase).join(' ')\\n}\\n\\nnames\\n  .map((name) => replaceSpace(name))\\n  .map((name) => changePartStartCase(name))\\n  .sort();\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"\\uBA54\\uC18C\\uB4DC \\uCCB4\\uC774\\uB2DD vs \\uD30C\\uC774\\uD504\\uB77C\\uC774\\uB2DD\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/chaining-com.js subtitle=\\\"단단한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/chaining-com.js\",\n    \"subtitle\": \"\\\"단단한\",\n    \"결합\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nconst omittedAge = _.chain(person)\\n  .omit(['age'])\\n  .value()\\n\\nconst result = rename({work: 'job'}, omittedAge)\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/CodeStyle/pipelining-com.js subtitle=\\\"느슨한 결합\\\"\",\n    \"file\": \"./src/CodeStyle/pipelining-com.js\",\n    \"subtitle\": \"\\\"느슨한\",\n    \"결합\\\"\": true\n  }, \"const rename = curry((keysMap, obj) => {\\n  // \\uAD6C\\uD604\\uBD80 \\uC0DD\\uB7B5\\n})\\n\\nR.pipe(\\n  R.omit(['age']),\\n  rename({work: 'job'}),\\n)(person)\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Currying/with-curry-func.js title=\\\"Currying, Pointfree Style\\\"\",\n    \"file\": \"./src/Currying/with-curry-func.js\",\n    \"title\": \"\\\"Currying,\",\n    \"Pointfree\": true,\n    \"Style\\\"\": true\n  }, \"const dissoc = curry((dissocKey, obj) => {\\n  // object\\uC5D0\\uC11C property\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uD568\\uC218\\n});\\n\\nconst rename = curry((keysMap, obj) => {\\n  // object\\uC5D0\\uC11C property\\uBA85\\uC744 \\uBC14\\uAFD4\\uC8FC\\uB294 \\uD568\\uC218\\n});\\n\\nconst person = {\\n  name: 'theo.gt',\\n  age: 15,\\n  work: 'developer'\\n};\\n\\npipe(\\n  dissoc('age'),\\n  rename({work: 'job'}),\\n)(person);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file=./src/Maybe/get-or-else-5.js title=\\\"Maybe Functor\\\"\",\n    \"file\": \"./src/Maybe/get-or-else-5.js\",\n    \"title\": \"\\\"Maybe\",\n    \"Functor\\\"\": true\n  }, \"const books = [\\n  { id: 'book1', title: 'coding with javascript' },\\n  { id: 'book2', title: 'speaking javaScript' },\\n];\\n\\nconst getOrElse = curry((defaultValue, maybe) => {\\n  return maybe.isNothing ? defaultValue : maybe.$value;\\n});\\n\\nconst getUpperBookTitleById = (id, books) => {\\n  return pipe(\\n    Maybe.of,\\n    map(findBookById(id)),\\n    map(prop('title')),\\n    map(startCase),\\n    getOrElse(`${id} Not Found`)\\n  )(books);\\n};\\n\\n// Coading with javascript\\ngetUpperBookTitleById('book1', books);\\n\\n// book3 Not Found\\ngetUpperBookTitleById('book3', books);\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Q & A\"), mdx(\"p\", null, \"More \\uD83D\\uDC49 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://velog.io/@nakta/series/FP-in-JS\"\n  }, \"https://velog.io/@nakta/series/FP-in-JS\")), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uACE0\\uB9D9\\uC2B5\\uB2C8\\uB2E4 \\uD83D\\uDE03\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"4479b0dc-44d5-5392-b515-da1182ae22fa","slug":"","title":"Hello FP in JS 👋"}},"staticQueryHashes":[]}